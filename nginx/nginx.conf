events {
    worker_connections 1024;
    multi_accept on;
}

http {
    # Logging Format
    log_format main_ext '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for" '
                        '$request_length $request_time $proxy_upstream_name $upstream_addr '
                        '$upstream_response_time $upstream_status $request_id';

    access_log /var/log/nginx/access.log main_ext;
    error_log /var/log/nginx/error.log warn;

    # Gzip Compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    gzip_comp_level 6;
    gzip_min_length 1000;

    # Upstream Service Definitions
    upstream service1_backend {
        server service1:8001;
    }

    upstream service2_backend {
        server service2:8002;
    }

    server {
        listen 80;
        server_name localhost;

        # Proxy Headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Request-ID $request_id;

        # Proxy Timeouts and Fallback
        proxy_connect_timeout 5s;
        proxy_send_timeout 5s;
        proxy_read_timeout 15s;
        proxy_next_upstream error timeout http_500 http_502 http_503 http_504;

        # Reverse Proxy to Service 1
        location /service1/ {
            proxy_pass http://service1_backend/;
        }

        # Reverse Proxy to Service 2
        location /service2/ {
            proxy_pass http://service2_backend/;
        }

        # Ignoring Favicon Requests
        location = /favicon.ico {
            log_not_found off;
            access_log off;
            return 204;
        }

        # Error page for 5xx errors
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }

        # Catch-all route
        location / {
            return 404;
        }
    }
}
